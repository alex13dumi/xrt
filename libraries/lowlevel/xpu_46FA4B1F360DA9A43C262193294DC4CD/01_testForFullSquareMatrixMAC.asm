;-------------------------------------------------------------------------------------
;XPU kernel low level library
;
;initial:
	;matrixIX:
;array mem[1] = [ 0 1 2 3 4 5 6 7 | 8 9 10 11 12 13 14 15  ]
;array mem[2] = [ 1 2 3 4 5 6 7 8 | 9 10 11 12 13 14 15 16  ]
;array mem[3] = [ 2 3 4 5 6 7 8 9 | 10 11 12 13 14 15 16 17  ]
;array mem[4] = [ 3 4 5 6 7 8 9 10 | 11 12 13 14 15 16 17 18  ]
;array mem[5] = [ 4 5 6 7 8 9 10 11 | 12 13 14 15 16 17 18 19  ]
;array mem[6] = [ 5 6 7 8 9 10 11 12 | 13 14 15 16 17 18 19 20  ]
;array mem[7] = [ 6 7 8 9 10 11 12 13 | 14 15 16 17 18 19 20 21  ]
;array mem[8] = [ 7 8 9 10 11 12 13 14 | 15 16 17 18 19 20 21 22  ]
;array mem[9] = [ 8 9 10 11 12 13 14 15 | 16 17 18 19 20 21 22 23  ]
;array mem[10] = [ 9 10 11 12 13 14 15 16 | 17 18 19 20 21 22 23 24  ]
;array mem[11] = [ 10 11 12 13 14 15 16 17 | 18 19 20 21 22 23 24 25  ]
;array mem[12] = [ 11 12 13 14 15 16 17 18 | 19 20 21 22 23 24 25 26  ]
;array mem[13] = [ 12 13 14 15 16 17 18 19 | 20 21 22 23 24 25 26 27  ]
;array mem[14] = [ 13 14 15 16 17 18 19 20 | 21 22 23 24 25 26 27 28  ]
;array mem[15] = [ 14 15 16 17 18 19 20 21 | 22 23 24 25 26 27 28 29  ]
;array mem[16] = [ 15 16 17 18 19 20 21 22 | 23 24 25 26 27 28 29 30  ]
	;matrix2:
;array mem[17] = [ 2 2 2 2 2 2 2 2 | 2 2 2 2 2 2 2 2  ]
;array mem[18] = [ 3 3 3 3 3 3 3 3 | 3 3 3 3 3 3 3 3  ]
;array mem[19] = [ 4 4 4 4 4 4 4 4 | 4 4 4 4 4 4 4 4  ]
;array mem[20] = [ 5 5 5 5 5 5 5 5 | 5 5 5 5 5 5 5 5  ]
;array mem[21] = [ 6 6 6 6 6 6 6 6 | 6 6 6 6 6 6 6 6  ]
;array mem[22] = [ 7 7 7 7 7 7 7 7 | 7 7 7 7 7 7 7 7  ]
;array mem[23] = [ 8 8 8 8 8 8 8 8 | 8 8 8 8 8 8 8 8  ]
;array mem[24] = [ 9 9 9 9 9 9 9 9 | 9 9 9 9 9 9 9 9  ]
;array mem[25] = [ 10 10 10 10 10 10 10 10 | 10 10 10 10 10 10 10 10  ]
;array mem[26] = [ 11 11 11 11 11 11 11 11 | 11 11 11 11 11 11 11 11  ]
;array mem[27] = [ 12 12 12 12 12 12 12 12 | 12 12 12 12 12 12 12 12  ]
;array mem[28] = [ 13 13 13 13 13 13 13 13 | 13 13 13 13 13 13 13 13  ]
;array mem[29] = [ 14 14 14 14 14 14 14 14 | 14 14 14 14 14 14 14 14  ]
;array mem[30] = [ 15 15 15 15 15 15 15 15 | 15 15 15 15 15 15 15 15  ]
;array mem[31] = [ 16 16 16 16 16 16 16 16 | 16 16 16 16 16 16 16 16  ]
;array mem[32] = [ 17 17 17 17 17 17 17 17 | 17 17 17 17 17 17 17 17  ]
	;matrixDestination:
;array mem[33] = [ 0 0 0 0 0 0 0 0 | 0 0 0 0 0 0 0 0  ]
;array mem[34] = [ 1 1 1 1 1 1 1 1 | 1 1 1 1 1 1 1 1  ]
;array mem[35] = [ 2 2 2 2 2 2 2 2 | 2 2 2 2 2 2 2 2  ]
;array mem[36] = [ 3 3 3 3 3 3 3 3 | 3 3 3 3 3 3 3 3  ]
;array mem[37] = [ 4 4 4 4 4 4 4 4 | 4 4 4 4 4 4 4 4  ]
;array mem[38] = [ 5 5 5 5 5 5 5 5 | 5 5 5 5 5 5 5 5  ]
;array mem[39] = [ 6 6 6 6 6 6 6 6 | 6 6 6 6 6 6 6 6  ]
;array mem[40] = [ 7 7 7 7 7 7 7 7 | 7 7 7 7 7 7 7 7  ]
;array mem[41] = [ 8 8 8 8 8 8 8 8 | 8 8 8 8 8 8 8 8  ]
;array mem[42] = [ 9 9 9 9 9 9 9 9 | 9 9 9 9 9 9 9 9  ]
;array mem[43] = [ 10 10 10 10 10 10 10 10 | 10 10 10 10 10 10 10 10  ]
;array mem[44] = [ 11 11 11 11 11 11 11 11 | 11 11 11 11 11 11 11 11  ]
;array mem[45] = [ 12 12 12 12 12 12 12 12 | 12 12 12 12 12 12 12 12  ]
;array mem[46] = [ 13 13 13 13 13 13 13 13 | 13 13 13 13 13 13 13 13  ]
;array mem[47] = [ 14 14 14 14 14 14 14 14 | 14 14 14 14 14 14 14 14  ]
;array mem[48] = [ 15 15 15 15 15 15 15 15 | 15 15 15 15 15 15 15 15  ]
;
;result:
;array mem[33] = [ 240 272 304 336 368 400 432 464 | 496 528 560 592 624 656 688 720  ]
;array mem[34] = [ 361 409 457 505 553 601 649 697 | 745 793 841 889 937 985 1033 1081  ]
;array mem[35] = [ 482 546 610 674 738 802 866 930 | 994 1058 1122 1186 1250 1314 1378 1442  ]
;array mem[36] = [ 603 683 763 843 923 1003 1083 1163 | 1243 1323 1403 1483 1563 1643 1723 1803  ]
;array mem[37] = [ 724 820 916 1012 1108 1204 1300 1396 | 1492 1588 1684 1780 1876 1972 2068 2164  ]
;array mem[38] = [ 845 957 1069 1181 1293 1405 1517 1629 | 1741 1853 1965 2077 2189 2301 2413 2525  ]
;array mem[39] = [ 966 1094 1222 1350 1478 1606 1734 1862 | 1990 2118 2246 2374 2502 2630 2758 2886  ]
;array mem[40] = [ 1087 1231 1375 1519 1663 1807 1951 2095 | 2239 2383 2527 2671 2815 2959 3103 3247  ]
;array mem[41] = [ 1208 1368 1528 1688 1848 2008 2168 2328 | 2488 2648 2808 2968 3128 3288 3448 3608  ]
;array mem[42] = [ 1329 1505 1681 1857 2033 2209 2385 2561 | 2737 2913 3089 3265 3441 3617 3793 3969  ]
;array mem[43] = [ 1450 1642 1834 2026 2218 2410 2602 2794 | 2986 3178 3370 3562 3754 3946 4138 4330  ]
;array mem[44] = [ 1571 1779 1987 2195 2403 2611 2819 3027 | 3235 3443 3651 3859 4067 4275 4483 4691  ]
;array mem[45] = [ 1692 1916 2140 2364 2588 2812 3036 3260 | 3484 3708 3932 4156 4380 4604 4828 5052  ]
;array mem[46] = [ 1813 2053 2293 2533 2773 3013 3253 3493 | 3733 3973 4213 4453 4693 4933 5173 5413  ]
;array mem[47] = [ 1934 2190 2446 2702 2958 3214 3470 3726 | 3982 4238 4494 4750 5006 5262 5518 5774  ]
;array mem[48] = [ 2055 2327 2599 2871 3143 3415 3687 3959 | 4231 4503 4775 5047 5319 5591 5863 6135  ]
;-------------------------------------------------------------------------------------

func testForFullSquareMatrixMultiply
label0:
				nop				activate
				sel_addrreg 0	scannop
				
				generateFullSquareMatrixIX(0)
			
				generateFullSquareMatrix(16, 2)
				
				generateFullSquareMatrix(32, 0)
				
;matrixMultiply 
				vload 1						vload  $ARRAY_NR_CELLS	
				store 0						addrstore	
				nop							scanadd
				vload 15					crload
				store 1						store 0
	;main loop			
		label4:	store 1						nop
				vload $ARRAY_NR_CELLS + 1	riload 0
	 ;inner loop
		label3:	left_redins     			mult 0
				brnzdec label3				riload -1
	 ;end inner loop			
				left_redins					riload 18
				load 0						nop
				vadd 16						srload
				nop							cradd
				vsub 15						crstore
				store 0						crload
				load 1						store 0
				brnzdec label4				nop
	;end main loop
;end matrixMultiply (742 cycles)

				cc_stop						nop
							
				setint						nop
				halt						nop
endfunc

;-------------------------------------------------------------------------------------



