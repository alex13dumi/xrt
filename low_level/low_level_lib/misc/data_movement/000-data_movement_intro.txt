




Contains primitive functions for implementing data movement between controller and array, both accumulator and memories.





ctrl_acc_ctrl_mem.asm
/*
	Copy data from controller accumulator into a controller memory location. 
	1 function arguments:
	 	memory location 

	contains:
		prim_copy_ctrl_acc_ctrl_mem
//*/





ctrl_mem_ctrl_acc.asm
/*
	Copy data from a controller memory location into controller accumulator. 
	1 function arguments:
	 	memory location 

	contains:
		prim_copy_ctrl_mem_ctrl_acc
//*/





ctrl_acc_array_acc.asm
/*
	Copy data from controller accumulator into all array accumulators. 
	0 function arguments.

	contains:
		prim_copy_ctrl_acc_array_acc
//*/





ctrl_acc_array_mem.asm
/*
	Copy data from controller accumulator into an array memory location. Same data is copied in all array cells. 
	1 function arguments:
	 	memory location 

	contains:
		prim_copy_ctrl_acc_array_mem
//*/





copy_ctrl_mem_array_acc_v1.asm
/*
	Copy data from controller memory location into array accumulators. Same data is copied in all array cells. 
	1 function arguments:
	 	memory location 

	contains:
		prim_copy_ctrl_mem_array_acc_v1
//*/





copy_ctrl_mem_array_acc_v2.asm
/*
	Copy data from controller memory locations into array accumulators. Different data (consecutive controller memory locations) are copied to all array cells. 
	1 function arguments:
	 	controller memory start location 

	contains:
		prim_copy_ctrl_mem_array_acc_v2
//*/





copy_ctrl_mem_array_mem_v1.asm
/*
	Copy data from controller memory location into array memory locations. Same data is copied in all array cells, at the same location. 
	2 function arguments:
	 	controller memory location from which to read
		array memory location at which to store

	contains:
		prim_copy_ctrl_mem_array_acc_v1
//*/





ctrl_mem_array_mem_v2.asm
/*
	Copy data from controller memory location into array memory locations. Different data (consecutive controller memory locations) are copied to all array cells, at the same mem location.
	2 function arguments:
	 	controller memory location from which to read
		array memory location at which to store

	contains:
		prim_copy_ctrl_mem_array_mem_v2
//*/





reverse_ctrl_mem_data.asm
/*
	Copy data from controller memory into the same locations of controller memory, reversed.
	2 function arguments:
	 	controller memory location from which to read
		size of data to be moved

	contains:
		prim_reverse_ctrl_mem_data
//*/





reverse_array_mem_data.asm
/*
	Copy data from array memory into the same locations of array memory, reversed.
	2 function arguments:
	 	array memory location from which to read
		size of data to be moved

	contains:
		prim_reverse_array_mem_data
//*/




array_mem_array_mem.asm
/*
	Copy a block of data from one section of array memory to another.
	3 function arguments:
	 	array memory location from which to read
		array memory location to which to write
		size of data block
	
	contains:
		prim_copy_array_mem_array_mem
//*/





ctrl_mem_ctrl_mem.asm
/*
	Copy a block of data from one section of controller memory  to another.
	3 function arguments:
	 	array memory location from which to read
		array memory location to which to write
		size of data block
	
	contains:
		prim_copy_ctrl_mem_ctrl_mem
//*/





vec_transpose_horiz2vert.asm
/*
	transposes a horizontal vector to a vertical vector, stored in one particular cell. (works only for full horizontal) 
	3 function arguments:
	 	memory location from array - line to read
		memory location in array - where to store 
		destination cell

	contains:
		prim_vec_transpose_horiz2vert
//*/



vec_transpose_vert2horiz.asm
/*
	transposes a vertical vector (from one cell) to a horizontal vector, stored in all cells, one line. (works only for full horizontal) 
	3 function arguments:
	 	start memory location from array - first memory location from array
		dest memory location in array - where to store (one line)
		destination cell

	contains:
		prim_vec_transpose_vert2horiz
//*/



mat_transpose_square.asm
/*
	Transposes a square matrix of size==nr_cells.
	3 function arguments:
	 	location from array mem where initial matrix is found (offset)
		location from array mem where result is stored (offset)
		location from array mem where bw permutation bits are found (offset)
	contains:
		prim_mat_transpose_square
//*/



mat_transpose_squares_small.asm


/*
	Transposes square matrices of any size, smaller than ARRAY_NR_CELLS.
	5 function arguments:
		location from array mem where initial line (see description in code) is found
		small matrices size. (square matrices)
	 	location from array mem where initial matrix is found (offset)
		location from array mem where result is stored (offset)
		location from array mem where bw permutation bits are found (offset)
	contains:
		prim_mat_transpose_square
//*
















